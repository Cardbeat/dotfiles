call plug#begin('~/.local/share/nvim/plugged')
"git
Plug 'rhysd/git-messenger.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
"terminal
Plug 'voldikss/vim-floaterm'
"whitespace
Plug 'ntpeters/vim-better-whitespace'
"languages
Plug 'sheerun/vim-polyglot'
"scroll smooth
Plug 'psliwka/vim-smoothie'
"snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
"utility
Plug 'tpope/vim-surround'
"syntax / node
Plug 'moll/vim-node', {'for': ['javascript', 'javascript.jsx', 'json']}
"tags
Plug 'ludovicchabant/vim-gutentags'
"completition
" Plug 'nvim-lua/completion-nvim'
"closing tags
Plug 'AndrewRadev/tagalong.vim'
Plug 'alvan/vim-closetag'
"mardown preview
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & npm install'  }
"highlight
Plug 'RRethy/vim-illuminate'
"search
Plug 'mileszs/ack.vim'
Plug 'mattn/webapi-vim'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'ap/vim-buftabline'
Plug 'vim-airline/vim-airline-themes'
"top bar
Plug 'kyazdani42/nvim-web-devicons' " Recommended (for coloured icons)
Plug 'ryanoasis/vim-devicons'
Plug 'Akin909/nvim-bufferline.lua'
Plug 'tpope/vim-commentary'
Plug 'gryf/pylint-vim'
Plug 'rakr/vim-one'
Plug 'vim-airline/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'liuchengxu/vista.vim'
"multiple cursors
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'preservim/nerdtree'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
"javascript
Plug 'pangloss/vim-javascript',    { 'for': ['javascript', 'javascript.jsx'] }
"import file
Plug 'kristijanhusak/vim-js-file-import', {'do': 'npm install'}
Plug 'gorkunov/smartpairs.vim'
Plug 'posva/vim-vue'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'neovim/nvim-lsp'
" ale
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" config PHP
Plug 'StanAngeloff/php.vim'
"PHP
Plug '2072/PHP-Indenting-for-VIm'
Plug 'phpstan/vim-phpstan'
" typescript
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
"html
Plug 'Valloric/MatchTagAlways'
" Plug 'frazrepo/vim-rainbow'
" Plug 'luochen1990/rainbow'
Plug 'jiangmiao/auto-pairs'
"indent
Plug 'Yggdroot/indentLine'
let g:indentLine_char_list = ['|']
call plug#end()

set t_Co=256
set termguicolors
set background=dark " or light if you prefer the light version
let g:airline_theme='bubblegum' " if you have Airline installed and want the associated theme
syntax on
let mapleader=" "
colo one
set lazyredraw
nnoremap <Leader>w :w<CR>
set noswapfile
set nobackup
set nowb
set scrolloff=8
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set relativenumber
set number
set textwidth=0
set linespace=2
set smarttab
set autoindent
" Advanced
set ruler	" Show row and column ruler information
set ttyfast
set backspace=indent,eol,start	" Backspace behaviour
" turn on syntax highlighting
syntax enable
set clipboard=unnamed
set backspace=indent,eol,start
set history=1000

" status bar
set showcmd
set showmode
set modeline            " Enable modeline.
set linespace=0         " Set line-spacing to minimum.
set nojoinspaces        " Prevents insertin two spaces after punctuation on a join (J)

" looks for JSX in just .js files
let g:jsx_ext_required = 0

" wrap quickfix window
autocmd FileType qf setlocal wrap linebreak
autocmd FileType qf setlocal wrap linebreak
autocmd BufNewFile,BufRead .babelrc setlocal filetype=json
autocmd BufNewFile,BufRead .eslintrc setlocal filetype=json
highlight Comment cterm=italic gui=italic

" searching
set incsearch " incremental searching
set hlsearch " hightlight matching
set showbreak=->
set wrap linebreak nolist " only manuly insert line breaks
set showmatch " show matching brackets for a moment

" vim better whitespace
let g:better_whitespace_enabled=0
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0


set mouse=a

"hide buffers when not displayed
set hidden

" search better
nnoremap / /\v\c
vnoremap / /\v\c

"Move between buffers
nmap <Leader>l :bnext<CR>
nmap <Leader>h :bprevious<CR>

" key mapping for tab navigation
nmap <Tab> gt
nmap <S-Tab> gT
"
"use ; to issue a command"
nnoremap ; :

"use :W as :w"
" nnoremap :W :w

" copy yanked text to clipboard
vnoremap <C-c> "+y

" disable visual bell
set noerrorbells
set novisualbell
set visualbell t_vb=

" toggle paste mode
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

inoremap jj <Esc><Esc>
inoremap jk <Esc><Esc>
inoremap kj <Esc><Esc>

"make <c-l> clear the highlight as well as redraw
nnoremap <C-m> :nohls<CR><C-L>
inoremap <C-m> <C-O>:nohls<CR>


"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
"
autocmd BufReadPost * call SetCursorPosition()

function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
 endfunction


  " file type recognition
filetype on
filetype plugin on
filetype indent on

" close buffer
nnoremap <silent> <leader>bd :bd<CR>

" visual search mappings
function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>

" search and replace shortcut
nmap <Leader>s :%s//cg<Left><Left><Left>

set encoding=utf-8              "Necessary to show Unicode glyphs

set nowritebackup
" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
" set shortmess=I
" always show signcolumns
set signcolumn=yes

set nocompatible
filetype plugin indent on

nnoremap <expr> <Leader>o (len(system('git rev-parse')) ? ':Files' : ':GFiles --exclude-standard --others --cached')."\<cr>"
imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)


"airline
let g:airline#extensions#tabline#enabled = 0
function! SearchWordWithAg()
  execute 'Ag' expand('<cword>')
endfunction

function! SearchVisualSelertionWithAg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Ag' selection
endfunction
function! SearchWithAgInDirectory(...)
  call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
endfunction
command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)
" }}}

" == AUTOCMD ================================
" by default .ts file are not identified as typescript and .tsx files are not
" identified as typescript react file, so add following
au BufNewFile,BufRead *.ts setlocal filetype=typescript
au BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
" == AUTOCMD END ================================


function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'âœ¨ all good âœ¨' : printf(
        \   'ðŸ˜ž %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline=
set statusline+=%m
set statusline+=\ %f
set statusline+=%=
set statusline+=\ %{LinterStatus()}

map <C-a> :NERDTreeToggle<CR>


let $NVIM_TUI_ENABLE_TRUE_COLOR=1
if (has("termguicolors"))
 set termguicolors
endif

"closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.tsx"

let g:onedark_hide_endofbuffer = 1
let g:onedark_terminal_italics = 1
let g:airline_theme='onedark'

"ale
" Fix files with prettier, and then ESLint.
" let b:ale_fixers = ['prettier', 'eslint']
" let b:ale_linter_aliases = [ 'javascript', 'vue' ]
" let b:ale_liters = ['eslint']
" Equivalent to the above.
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint','prettier'],
\   'vue': ['prettier', 'eslint'],
\}
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_completion_autoimport = 1
set timeoutlen=500

"tagalong
let g:tagalong_additional_filetypes = ['vue']
let g:tagalong_verbose = 1

" use alt+hjkl para mover entre split/vsplit paineis
tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>

" enter indented
inoremap {<Enter> {<Enter>}<Esc>O

"vista
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction


set statusline+=%{NearestMethodOrFunction()}

autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

let g:vista_fzf_preview = ['right:50%']

let g:vista#renderer#enable_icon = 1

let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }


"markdown preview
let g:mkdp_browser = 'Firefox'
let g:mkdp_echo_preview_url = 1

nmap <Leader>f :Prettier<CR>
nmap <Leader>p :Ag<CR>

" ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
" nvim lsp
" :lua << END
"   require'nvim_lsp'.tsserver.setup{}
" END

" completition
" lua require'nvim_lsp'.tsserver.setup{on_attach=require'completion'.on_attach}
" autocmd BufEnter * lua require'completion'.on_attach()

" Use <Tab> and <S-Tab> to navigate through popup menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect

" Avoid showing message extra message when using completion
set shortmess+=c

inoremap <silent><expr> <C-space> completion#trigger_completion()

"tags
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['package.json', '.git']
let g:gutentags_ctags_exclude = [
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]

let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')

let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0

let g:gutentags_ctags_extra_args = [
      \ '--tag-relative=yes',
      \ '--fields=+ailmnS',
      \ ]


"better identing
vnoremap < <gv
vnoremap > >gv

"moving between buffers
" nnoremap <silent> <TAB> :bnext<CR>
" nnoremap <silent> <S-TAB> :bprevious<CR>


" Move selected line / block of text in visual mode
" shift + k to move up
" shift + j to move down
xnoremap K :move '<-2<CR>gv-gv
xnoremap J :move '>+1<CR>gv-gv

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" Use alt + hjkl to resize windows
nnoremap <silent> <M-j>    :resize -2<CR>
nnoremap <silent> <M-k>    :resize +2<CR>
nnoremap <silent> <M-h>    :vertical resize -2<CR>
nnoremap <silent> <M-l>    :vertical resize +2<CR>

"gitgutter
let g:gitgutter_sign_added              = 'â–Ž'
let g:gitgutter_sign_modified           = 'â–Ž'
let g:gitgutter_sign_removed            = 'ï¤‰'
let g:gitgutter_sign_removed_first_line = 'ï¤‰'
let g:gitgutter_sign_modified_removed   = 'â–Ž'
let g:gitgutter_preview_win_floating = 1

let g:gitgutter_enabled = 1

highlight GitGutterAdd    guifg=#98c379 ctermfg=2
highlight GitGutterChange guifg=#61afef ctermfg=3
highlight GitGutterDelete guifg=#e06c75 ctermfg=1

"top bar
" lua require'bufferline'.setup()

"ultisnippets
let g:UltiSnipsExpandTrigger="<c-y>"

" highlight
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" floatterm

" let g:floaterm_wintype='normal'
" let g:floaterm_height=6

let g:floaterm_keymap_toggle = '<Leader><Enter>'
let g:floaterm_keymap_next   = '<S-l>'
let g:floaterm_keymap_prev   = '<S-h>'
let g:floaterm_keymap_new    = '<S-j>'

" Floaterm
let g:floaterm_gitcommit='floaterm'
let g:floaterm_autoinsert=1
let g:floaterm_width=0.8
let g:floaterm_height=0.8
let g:floaterm_wintitle=0
let g:floaterm_autoclose=1
